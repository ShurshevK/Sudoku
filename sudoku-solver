{"metadata":{"language_info":{"name":"python","version":"3.7.8","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# solver.py\ndef solve(bo):\n    \"\"\"\n    Solves a sudoku board using backtracking\n    :param bo: 2d list of ints\n    :return: solution\n    \"\"\"\n    find = find_empty(bo)\n    if find:\n        row, col = find\n    else:\n        return True\n\n    for i in range(1,10):\n        if valid(bo, (row, col), i):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, pos, num):\n    \"\"\"\n    Returns if the attempted move is valid\n    :param bo: 2d list of ints\n    :param pos: (row, col)\n    :param num: int\n    :return: bool\n    \"\"\"\n\n    # Check row\n    for i in range(0, len(bo)):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check Col\n    for i in range(0, len(bo)):\n        if bo[i][pos[1]] == num and pos[1] != i:\n            return False\n\n    # Check box\n\n    box_x = pos[1]//3\n    box_y = pos[0]//3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x*3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    \"\"\"\n    finds an empty space in the board\n    :param bo: partially complete board\n    :return: (int, int) row col\n    \"\"\"\n\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)\n\n    return None\n\n\ndef print_board(bo):\n    \"\"\"\n    prints the board\n    :param bo: 2d List of ints\n    :return: None\n    \"\"\"\n    for i in range(len(bo)):\n        if i % 3 == 0 and i != 0:\n            print(\"- - - - - - - - - - - - - -\")\n        for j in range(len(bo[0])):\n            if j % 3 == 0:\n                print(\" | \",end=\"\")\n\n            if j == 8:\n                print(bo[i][j], end=\"\\n\")\n            else:\n                print(str(bo[i][j]) + \" \", end=\"\")","metadata":{},"execution_count":null,"outputs":[]}]}
